// Included Libraries
  #include <Wire.h>
  #include "SPI.h"
  #include "Adafruit_GFX.h"
  #include "Adafruit_ILI9341.h"

// Variables
  float tempK, tempC, tempF, lightReading, waterLevel;
  float soilMoisture1, soilMoisture2, soilMoisture3, soilMoisture4;
  float capSoilValue1, capSoilValue2, capSoilValue3, capSoilValue4;
  long int seconds = 0;
  int buttonState = 0;
  int airValue1 = 0;
  int waterValue1 = 0;

  int airValue2 = 0;
  int waterValue2 = 0;

  int airValue3 = 0;
  int waterValue3 = 0;

  int airValue4 = 0;
  int waterValue4 = 0;

  bool flag = HIGH; //flag to control while loops
  bool calibrating = false;
  bool calibratingComplete = false;
  //const int airValue = 620; // Calibrate these two values
  //const int waterValue = 310;
    


// For the Adafruit shield, these are the default.
#define TFT_DC 9
#define TFT_CS 10

// Use hardware SPI (on Uno, #13, #12, #11) and the above for CS/DC
Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC);
// If using the breakout, change pins as desired
//Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC, TFT_MOSI, TFT_CLK, TFT_RST, TFT_MISO);


// Setting Pins
  #define thermistor A0
  #define photoRes A1
  #define capSoilSensor1 A2
  #define capSoilSensor2 A3
  #define capSoilSensor3 A6 
  #define capSoilSensor4 A7
  #define floatSwitch25 5
  #define floatSwitch50 6
  #define floatSwitch75 7
  #define floatSwitch100 8
  #define pushButton 4
  #define relay1 44
  #define relay2 42
  #define relay3 40
  #define relay4 38



// Sets Up LCD & Pins
  void setup() {
    pinMode (pushButton, INPUT);  //button is an input
    pinMode(floatSwitch25, INPUT_PULLUP);
    pinMode(floatSwitch50, INPUT_PULLUP);
    pinMode(floatSwitch75, INPUT_PULLUP);
    pinMode(floatSwitch100, INPUT_PULLUP);
       pinMode(relay1, OUTPUT);
   digitalWrite(relay1, LOW);
   pinMode(relay2, OUTPUT);
   digitalWrite(relay2, LOW);
   pinMode(relay3, OUTPUT);
   digitalWrite(relay3, LOW);
   pinMode(relay4, OUTPUT);
   digitalWrite(relay4, LOW);
    Serial.begin(9600); //Start Serial Monitor
    tft.begin();
    tft.fillScreen(ILI9341_BLACK);
    tft.setCursor(0, 0);
    tft.setTextColor(ILI9341_WHITE);  tft.setTextSize(1);
    tft.println("Waiting for input");
  }

// Calls Functions Every 10 Seconds
  void loop()
  {
    setClock();
    buttonState = digitalRead(pushButton);
    if(buttonState == 1 && calibrating == false){
      calibrateSensors();
       }
        if(seconds == 10 && calibratingComplete == true){
       collectedData();
       printData();
       testText();
        }
        if(capSoilSensor1 < 50)
         {
           digitalWrite(relay1, LOW);
           } else {
            digitalWrite(relay1, HIGH);  
             }

            if(capSoilSensor2 < 50)
             {
              digitalWrite(relay2, LOW);
                } 
                else 
                {
               digitalWrite(relay2, HIGH);  
                }

                if(capSoilSensor3 < 50)
                {
               digitalWrite(relay3, LOW);
                } 
               else 
               {
                digitalWrite(relay3, HIGH);  
                }    

                if(capSoilSensor4 < 50)
                   {
                   digitalWrite(relay4, LOW);
                    } 
                   else 
                    {
                   digitalWrite(relay4, HIGH);  
                    }
  
                    }

// 10 Second Timer
  void setClock(){
    seconds++;
    delay(1000);
    if(seconds > 10)
    {seconds = 0;}
  }
  
// Print To LCD
 
    
// Collects Data From Sensors
  void collectedData()
  {
  //Water Level [%] (Float Switches)
    int floatState25 = digitalRead(floatSwitch25);
    int floatState50 = digitalRead(floatSwitch50);
    int floatState75 = digitalRead(floatSwitch75);
    int floatState100 = digitalRead(floatSwitch100);
   
    /*/Water Level [%] (Float Switches)
    //int floatState25 = 1;
    digitalRead(floatSwitch25);
    //int floatState50 = 1;
    digitalRead(floatSwitch50);
    //int floatState75 = random(0,2);
    digitalRead(floatSwitch75);
    //int floatState100 = random(0,2);
    digitalRead(floatSwitch100);
    */
  // Depending On Which Switches Are Active Will Change Value Of Water Level  
    if(floatState25 && !floatState50 && !floatState75 && !floatState100){
      waterLevel = 25;
    }
    else if(floatState50 && !floatState75 && !floatState100){
      waterLevel = 50;
    }
    else if(floatState75 && !floatState100){
      waterLevel = 75;
    }
    else if(floatState100){
      waterLevel = 100;
    }
    else{
      waterLevel = 0;    
    }

  // Lux [Lx] (Photo-Resistor)
    lightReading = random(500.00,800.00);//analogRead(photoRes);

  // Temperature [K, F, C] (Thermistor)
    /*int tempAir  = analogRead(thermistor);
    tempK = log(10000.0 * ((1024.0 / tempAir - 1)));
    tempK = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * tempK * tempK )) * tempK );
    */
    tempK = random(294.00,311.00);
    tempC = tempK - 273.15;
    tempF = (tempC * 9.0)/ 5.0 + 32.0;
    
  
  // Soil Moisutre [%] (Capacitive Soil Moisture Sensors)
    //capSoilValue1 = 400; 
    analogRead(A2);
    //capSoilValue2 = random(310,621); 
    analogRead(A3);
    //capSoilValue3 = random(310,621);
    analogRead(A4);
    //capSoilValue4 = random(310,621); 
    analogRead(A5);
    //Turn Soil Moisture Value To %
    soilMoisture1 = map(capSoilValue1, airValue1, waterValue1, 0, 100);
    soilMoisture2 = map(capSoilValue2, airValue2, waterValue2, 0, 100);    
    soilMoisture3 = map(capSoilValue3, airValue3, waterValue3, 0, 100);    
    soilMoisture4 = map(capSoilValue4, airValue4, waterValue4, 0, 100);    


    
  }

unsigned long testText() {
  tft.fillScreen(ILI9341_BLACK);
  unsigned long start = micros();
  tft.setCursor(0, 0);
  tft.setTextSize(2);
  tft.println("Join Garduino!!");
  tft.println("Data");
  tft.setTextSize(1);
  tft.print("Soil Moisture 1: "); tft.println(soilMoisture1);
  tft.print("Soil Moisture 2: "); tft.println(soilMoisture2);
  tft.print("Soil Moisture 3: "); tft.println(soilMoisture3);
  tft.print("Soil Moisture 4: "); tft.println(soilMoisture4);
  tft.print("Temperature (F): "); tft.println(tempF);
  tft.print("Light Reading:   "); tft.println(lightReading);
  tft.print("Water Level:     "); tft.println(waterLevel);
  return micros() - start;
}
// Prints Out Data To Send to ESP (Ex: <10.2, 11.89, 59.00>)
  void printData(){
    Serial.print("<");
      Serial.print(lightReading);
      Serial.print(", ");
      Serial.print(tempK);
      Serial.print(", ");
      Serial.print(tempC);
      Serial.print(", ");
      Serial.print(tempF);
      Serial.print(", ");
      Serial.print(waterLevel);
      Serial.print(", ");
      Serial.print(soilMoisture1);
      Serial.print(", ");
      Serial.print(soilMoisture2);
      Serial.print(", ");
      Serial.print(soilMoisture3);
      Serial.print(", ");
      Serial.print(soilMoisture4);
    Serial.println(">");
  }

  void calibrateSensors()
{
    calibrating = true;
    if(buttonState == 1){                  //if button is pressed, start calibration
        //signal to user
    tft.fillScreen(ILI9341_BLACK);
    tft.setCursor(0, 0);
    while(flag){
      if(buttonState == 1){
        
        tft.println("Prepare sensor one for dry value");
        delay(500);
        buttonState = 0;
        tft.println("Press button when ready to calibrate");
        while(buttonState == 0){
          buttonState = digitalRead(pushButton);
          if(buttonState == HIGH){
            tft.println("Reading dry value for sensor one");
            airValue1 = analogRead(soilMoisture1);                        //read and store dry value for this sensor
            delay(500);
            tft.println("Sensor one dry value read");

            tft.println("Proceeding to wet value");
            flag = LOW;                                           //set flag to escape while loop
          }
          
        }
      }
    }

    flag = HIGH;                                                  //reset flag to remain in next loop


    while(flag){
      buttonState = digitalRead(pushButton);

      if(buttonState == HIGH){
        tft.println("Prepare sensor one for wet value");
        delay(500);
        buttonState = LOW;
        tft.println("Press button when ready to calibrate");
        while(buttonState == LOW){
          buttonState = digitalRead(pushButton);
          if(buttonState == HIGH){
            tft.println("Reading wet value for sensor one");
            waterValue1 = analogRead(soilMoisture1);                      //read and store wet value for this sensor
            delay(500);
            tft.println("Sensor one wet value read");

            tft.println("Proceeding to next sensor");
            flag = LOW;
          } 
        }
      }
    }

            //repeat for remaining sensors


    flag = HIGH;

    while(flag){
      if(buttonState == HIGH){
        
        tft.println("Prepare sensor two for dry value");
        delay(500);
        buttonState = LOW;
        tft.println("Press button when ready to calibrate");
        while(buttonState == LOW){
          buttonState = digitalRead(pushButton);
          if(buttonState == HIGH){
            tft.println("Reading dry value for sensor two");
            airValue2 = analogRead(soilMoisture2);
            delay(500);
            tft.println("Sensor two dry value read");

            tft.println("Proceeding to wet value");
            flag = LOW;
          }
        }
      }
    }

    flag = HIGH;


    while(flag){
      buttonState = digitalRead(pushButton);

      if(buttonState == HIGH){
        tft.println("Prepare sensor two for wet value");
        delay(500);
        buttonState = LOW;
        tft.println("Press button when ready to calibrate");
        while(buttonState == LOW){
          buttonState = digitalRead(pushButton);
          if(buttonState == HIGH){
            tft.println("Reading wet value for sensor two");
            waterValue2 = analogRead(soilMoisture2);
            delay(500);
            tft.println("Sensor two wet value read");

            tft.println("Proceeding to next sensor");
            flag = LOW;
          } 
        }
      }
    }

    flag = HIGH;

    while(flag){
      if(buttonState == HIGH){
        
        tft.println("Prepare sensor three for dry value");
        delay(500);
        buttonState = LOW;
        tft.println("Press button when ready to calibrate");
        while(buttonState == LOW){
          buttonState = digitalRead(pushButton);
          if(buttonState == HIGH){
            tft.println("Reading dry value for sensor three");
            airValue3 = analogRead(soilMoisture3);
            delay(500);
            tft.println("Sensor three dry value read");

            tft.println("Proceeding to wet value");
            flag = LOW;
          }
        }
      }
    }

    flag = HIGH;


    while(flag){
      buttonState = digitalRead(pushButton);

      if(buttonState == HIGH){
        tft.println("Prepare sensor three for wet value");
        delay(500);
        buttonState = LOW;
        tft.println("Press button when ready to calibrate");
        while(buttonState == LOW){
          buttonState = digitalRead(pushButton);
          if(buttonState == HIGH){
            tft.println("Reading wet value for sensor three");
            waterValue3 = analogRead(soilMoisture3);
            delay(500);
            tft.println("Sensor three wet value read");

            tft.println("Proceeding to next sensor");
            flag = LOW;
          }
        }
      }
    }

    flag = HIGH;

    while(flag){
      if(buttonState == HIGH){
        
        tft.println("Prepare sensor four for dry value");
        delay(500);
        buttonState = LOW;
        tft.println("Press button when ready to calibrate");
        while(buttonState == LOW){
          buttonState = digitalRead(pushButton);
          if(buttonState == HIGH){
            tft.println("Reading dry value for sensor four");
            airValue4 = analogRead(soilMoisture4);
            delay(500);
            tft.println("Sensor four dry value read");

            tft.println("Proceeding to wet value");
            flag = LOW;
          }
        }
      }
    }

    flag = HIGH;


    while(flag){
      buttonState = digitalRead(pushButton);

      if(buttonState == HIGH){
        tft.println("Prepare sensor four for wet value");
        delay(500);
        buttonState = LOW;
        tft.println("Press button when ready to calibrate");
        while(buttonState == LOW){
          buttonState = digitalRead(pushButton);
          if(buttonState == HIGH){
            tft.println("Reading wet value for sensor four");
            waterValue4 = analogRead(soilMoisture4);
            delay(500);
            tft.println("Sensor four wet value read");

            tft.println("Calibration complete for all sensors!!");
            delay(2000);
            flag = LOW;
          } 
        }
      }
    }

    flag = HIGH;

    //display calibration values to user

    tft.fillScreen(ILI9341_BLACK);
    // unsigned long start = micros();
    tft.setCursor(0, 0);
    tft.setTextColor(ILI9341_WHITE);  tft.setTextSize(1);
    tft.println("Displaying Calibrated Values:");
    tft.println("Sensor 1 ");
    tft.print(" Dry Value: "); tft.print(airValue1); tft.print("  Wet Value: "); tft.println(waterValue1);
    tft.println("Sensor 2 ");
    tft.print(" Dry Value: "); tft.print(airValue2); tft.print("  Wet Value: "); tft.println(waterValue2);
    tft.println("Sensor 3 ");
    tft.print(" Dry Value: "); tft.print(airValue3); tft.print("  Wet Value: "); tft.println(waterValue3);
    tft.println("Sensor 4 ");
    tft.print(" Dry Value: "); tft.print(airValue4); tft.print("  Wet Value: "); tft.println(waterValue4);
    tft.println(":)");
    calibratingComplete = true;
  }
}
